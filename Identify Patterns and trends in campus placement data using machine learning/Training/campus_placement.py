# -*- coding: utf-8 -*-
"""campus placement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ijovwU3RlEp7r1NbgxF7Y2at65COEO2z

# Task 1: Problem understanding
## 1)Specify business problem
## 2) Business Requirement
## 3) literature survey
## 4) social/ Business impact

# Task 2: Data Understanding
## 1) Data collection
## 2) Loading Data

# Task 3: EDA
## 1) Data cleaning
## 2) Data Manipulation
## 3) Visualization

# Task 4: Model building

# Task 5: Testing the model

# Task 6: Deployment

# Task 7: Doc
"""

# Importing required lib

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

plt.style.available

# Applying styles to notebook

plt.style.use('fivethirtyeight')

# Reading csv data

df = pd.read_csv('/content/collegePlace.csv')
df.head()

# Checking data type

df.info()

"""
Types of Analysis
1) Univaiate analysis
2) Bivariate analysis
3) Multivariate analysis
4) Descriptive analysis / statistics
"""

# Univariate analysis - Extracting info from a single column

# Checking data distribution
plt.subplot(121)
sns.distplot(df['Age'])
plt.subplot(122)
sns.distplot(df['Hostel'], color='red')

# creating dummy dataframe for categorical values

df_cat = df.select_dtypes(include='int64')
df_cat.head()

# visualizing counts in each variable
plt.figure(figsize=(18,4))
for i,j in enumerate(df_cat):
  plt.subplot(1,6,i+1)
  sns.countplot(df[j])

# Bivariate analysis - Extracting info from  a double column

# Visualizing the relation between Age,Internships,Hostel,CGPA,HistoryOfBacklogs & PlacedOrNot 

plt.figure(figsize=(10,5))
plt.subplot(131)
sns.countplot(df['PlacedOrNot'],x=df['Age'])
plt.subplot(132)
sns.countplot(df['PlacedOrNot'],x=df['Internships'])
plt.subplot(133)
sns.countplot(df['PlacedOrNot'],x=df['Hostel'])
plt.subplot(131)
sns.countplot(df['PlacedOrNot'],x=df['CGPA'])
plt.subplot(132)
sns.countplot(df['PlacedOrNot'],x=df['HistoryOfBacklogs'])

# creating new column

df['Age_'] = ['15-30' if x<=30 else "30-50" if x>30 and x<=50 else '50+' for x in df['Age']]

df.head()

# Finding relation between Age_ &  PlacedOrNot

sns.heatmap(pd.crosstab(df['Age_'],df['PlacedOrNot']))

# Removing Age_ column

df.drop('Age_', axis=1, inplace=True)
df.head()

# Multivariate analysis - Extract info from more than 2 columns

# Finding corr()

sns.heatmap(df.corr())

# Descriptive analysis - descriptive stat

df.describe(include='all')

# Data preprocessing

# Finding the shape of data

df.shape

# Finding null values

df.isnull().sum()

# Finding dtype

df.info()

# Finding outliers

sns.boxplot(df['Hostel'])

# Finding the count of outliers

# IQR = q3-q1....., ub = q3+(1.5*IQR),  1b = q1-(1.5*IQR)

q1 = np.quantile(df['Hostel'],0.25)
q3 = np.quantile(df['Hostel'],0.75)

print('Q1 = {}'.format(q1))
print('Q3 = {}'.format(q3))

IQR = q3-q1

print('IQR value is {}'.format(IQR))

upperBound = q3+(1.5*IQR)
lowerBound = q1-(1.5*IQR)
print('The upper bound value is {} & the lower bound value is {}'.format(upperBound,lowerBound))

print('skwed data :',len(df[df['Hostel']>upperBound]))

from seaborn.distributions import distplot
# Handling outliers

from scipy import stats

plt.figure(figsize=(15,4))
plt.subplot(131)
sns.distplot(df['Hostel'])
plt.subplot(132)
stats.probplot(np.log(df['Hostel']),plot=plt)

# Transforming normal values to log values

df['Hostel']=np.log(df['Hostel'])

df.head()

# Encoding 

df['HistoryOfBacklogs'] = [ 0 if x=='LOW' else 1 if x=='NORMAL' else 2 for x in df['HistoryOfBacklogs']]

df['Gender'] = df['Gender'].replace({'F':0, 'M':1})

df.head()

# Spoliting dep & Indep variables

x = df.drop('PlacedOrNot',axis=1)
x.head()

y = df['PlacedOrNot']
y

# simple linear reg

# Import necessary lib

import numpy as np
import pandas as pd

# Reading the data

df = pd.read_csv('/content/collegePlace.csv')
df.head()

# Checking the datatype

df.info()

# Descriptive Stat

df.describe()

# Checking null values

df.isnull().sum()

# visualizing data points

import matplotlib.pyplot as plt

plt.scatter(df['HistoryOfBacklogs'],df['CGPA'])

# independent variable

X = df.iloc[:,0:1]
x.head()

# Dependent variable

y = df.iloc[:,1:]
y.head()

# Split training & testing

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.3,random_state=11)

print(xtrain.shape)
print(ytest.shape)

# Model building 

from sklearn.linear_model import LinearRegression

# Checking unique values

df['Stream'].unique()

# Converting object datatype to int

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df['Stream'] = le.fit_transform(df['Stream'])

df.head()

# Independent variables

x = df.iloc[:,0:7]

x.head()

y = df.iloc[:,6:]
y.head()

# Spliting data into training and testing set

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=10)

print(xtrain.shape)
print(xtest.shape)

# Model building

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

# finding co_relation

df.corr()

# Spliting In-dependent variable

x = df.iloc[:,0:8]
x.head()

y = df.iloc[:,7:]
y.head()

# Scatter plot

plt.scatter(df['HistoryOfBacklogs'],df['PlacedOrNot'])

sns.boxplot(df['Internships'])

q1 = np.quantile(df['Internships'],0.25)
q3 = np.quantile(df['Internships'],0.75)

IQR = q3-q3

upper_bound = q3+(1.5*IQR)
lower_bound = q1+(1.5*IQR)

skewed_values = len(df[df['Internships']>upper_bound])

print('Q1={}'.format(q1))
print('Q3={}'.format(q3))
print('Upper bound = {}'.format(upper_bound))
print('Lower bound = {}'.format(lower_bound))
print('Count of skewed data = {}'.format(skewed_values))

